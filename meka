#include <meka.hpp>

#ifdef MEKA_BOOTSTRAP_MEKA

# include <meka/action/configure.hpp>
# include <meka/action/build.hpp>

namespace meka {

  meka::module_type meka::package::root;

  extern "C" int main(int argc, char const* argv[]) {
    meka::configure(meka::package::root);
    meka::build(meka::package::root);

    return 0;
  }

}

#endif /* ifdef MEKA_BOOTSTRAP_MEKA */

namespace meka {

  meka::package yamlcpp = {
    path    = meka::this_dir() / "lib/libcorefungi/lib/yaml-cpp",
    name    = "yaml-cpp",
    version = "1.5.0",

    meka::lib {
      name    = "yaml-cpp",
      sources = { "src/.*\\.cpp" }
    },
  };

  meka::package corefungi = {
    path    = meka::this_dir() / "lib/libcorefungi",
    name    = "libcorefungi",
    version = "0.0.1",

    modules   = { meka::yamlcpp },

    meka::lib {
      name    = "corefungi",
      sources = { "src/.*\\.cpp" },
      links   = { "yaml-cpp", "boost_program_options"}
    },
  };

  meka::package self = {
    path    = meka::this_dir(),
    name    = "meka",
    version = "0.0.1",

    modules   = { meka::corefungi },

    meka::lib {
      name    = "meka",
      sources = { "src/meka/.*\\.cpp" },
      links   = { "corefungi" }

      // meka::host
    },

    meka::bin {
      name    = "meka",
      sources = { "src/meka.cpp" },
      links   = { "meka", "boost_filesystem","boost_system", "boost_regex" }

      // meka::host
    },

    meka::meka,
  };

}
