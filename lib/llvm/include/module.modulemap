module llvm [system] {
	module Analysis {
		requires cplusplus
		umbrella "llvm/Analysis"
		module * { export * }

		// FIXME: Why is this excluded?
		exclude header "llvm/Analysis/BlockFrequencyInfoImpl.h"

		// This is intended for (repeated) textual inclusion.
		textual header "llvm/Analysis/TargetLibraryInfo.def"

	}

	module AsmParser { requires cplusplus umbrella "llvm/AsmParser" module * { export * }
	}

	// A module covering CodeGen/ and Target/. These are intertwined
	// and codependent, and thus notionally form a single module.
	module Backend {
		requires cplusplus

		module CodeGen {
			umbrella "llvm/CodeGen"
			module * { export * }

			// FIXME: Why is this excluded?
			exclude header "llvm/CodeGen/MachineValueType.h"

			// Exclude these; they're intended to be included into only a single
			// translation unit (or none) and aren't part of this module.
			exclude header "llvm/CodeGen/CommandFlags.h"
			exclude header "llvm/CodeGen/LinkAllAsmWriterComponents.h"
			exclude header "llvm/CodeGen/LinkAllCodegenComponents.h"
		}

		module Target {
			umbrella "llvm/Target"
			module * { export * }
		}

		// FIXME: Where should this go?
		module Analysis_BlockFrequencyInfoImpl {
			header "llvm/Analysis/BlockFrequencyInfoImpl.h"
			export *
		}

	}

	module Bitcode { requires cplusplus umbrella "llvm/Bitcode" module * { export * } }
	module Config { requires cplusplus umbrella "llvm/Config" module * { export * } 
		textual header "llvm/Config/Targets.def"
		textual header "llvm/Config/AsmPrinters.def"
		textual header "llvm/Config/AsmParsers.def"
		textual header "llvm/Config/Disassemblers.def"
	}

	module DebugInfo_DWARF {
		requires cplusplus

		umbrella "llvm/DebugInfo/DWARF"
		module * { export * }

	}

//	module DebugInfo_PDB {
//		requires cplusplus
//
//		umbrella "llvm/DebugInfo/PDB"
//		module * { export * }
//
//		// Separate out this subdirectory; it's an optional component that depends on
//		// a separate library which might not be available.
//		//
//		// FIXME: There should be a better way to specify this.
//		exclude header "llvm/DebugInfo/PDB/DIA/DIADataStream.h"
//		exclude header "llvm/DebugInfo/PDB/DIA/DIAEnumDebugStreams.h"
//		exclude header "llvm/DebugInfo/PDB/DIA/DIAEnumLineNumbers.h"
//		exclude header "llvm/DebugInfo/PDB/DIA/DIAEnumSourceFiles.h"
//		exclude header "llvm/DebugInfo/PDB/DIA/DIAEnumSymbols.h"
//		exclude header "llvm/DebugInfo/PDB/DIA/DIALineNumber.h"
//		exclude header "llvm/DebugInfo/PDB/DIA/DIARawSymbol.h"
//		exclude header "llvm/DebugInfo/PDB/DIA/DIASession.h"
//		exclude header "llvm/DebugInfo/PDB/DIA/DIASourceFile.h"
//		exclude header "llvm/DebugInfo/PDB/DIA/DIASupport.h"
//
//	}

//	module DebugInfo_PDB_DIA {
//		requires cplusplus
//
//		umbrella "llvm/DebugInfo/PDB/DIA"
//		module * { export * }
//	}

	module ExecutionEngine {
		requires cplusplus

		umbrella "llvm/ExecutionEngine"
		module * { export * }

		// Exclude this; it's an optional component of the ExecutionEngine.
		exclude header "llvm/ExecutionEngine/OProfileWrapper.h"

		// Exclude these; they're intended to be included into only a single
		// translation unit (or none) and aren't part of this module.
		exclude header "llvm/ExecutionEngine/JIT.h"
		exclude header "llvm/ExecutionEngine/MCJIT.h"
		exclude header "llvm/ExecutionEngine/Interpreter.h"
		exclude header "llvm/ExecutionEngine/OrcMCJITReplacement.h"

	}

	module IR {
		requires cplusplus

		// FIXME: Is this the right place for these?
		module Pass { header "llvm/Pass.h" export * }
		module PassSupport { header "llvm/PassSupport.h" export * }
		module PassAnalysisSupport { header "llvm/PassAnalysisSupport.h" export * }
		module PassRegistry { header "llvm/PassRegistry.h" export * }
		module InitializePasses { header "llvm/InitializePasses.h" export * }

		umbrella "llvm/IR"
		module * { export * }

		// These are intended for (repeated) textual inclusion.
		textual header "llvm/IR/Intrinsics.gen"
		textual header "llvm/IR/DebugInfoFlags.def"
		textual header "llvm/IR/Instruction.def"
		textual header "llvm/IR/Metadata.def"

	}

	module IRReader { requires cplusplus umbrella "llvm/IRReader" module * { export * } link "LLVMIRReader" }
	module LineEditor { requires cplusplus umbrella "llvm/LineEditor" module * { export * } link "LLVMLineEditor" }
	module LTO { requires cplusplus umbrella "llvm/LTO" module * { export * } link "LLVMLTO" }

	module MC {
		requires cplusplus

		// FIXME: Mislayered?
		module Support_TargetRegistry {
			header "llvm/Support/TargetRegistry.h"
			export *
		}

		umbrella "llvm/MC"
		module * { export * }

		// Exclude this; it's fundamentally non-modular.
		exclude header "llvm/MC/MCTargetOptionsCommandFlags.h"

	}

	module Object {
		requires cplusplus
		umbrella "llvm/Object"
		module * { export * }

	}

	module Option { requires cplusplus umbrella "llvm/Option" module * { export * } link "LLVMOption" }
	module TableGen { requires cplusplus umbrella "llvm/TableGen" module * { export * } link "LLVMTableGen" }

	module Transforms {
		requires cplusplus
		umbrella "llvm/Transforms"
		module * { export * }

		// FIXME: Excluded because it does bad things with the legacy pass manager.
		exclude header "llvm/Transforms/IPO/PassManagerBuilder.h"

	}

	// A module covering ADT/ and Support/. These are intertwined and
	// codependent, and notionally form a single module.
	module Utils {
		module ADT {
			requires cplusplus

			umbrella "llvm/ADT"
			module * { export * }
		}

		module Support {
			requires cplusplus

			umbrella "llvm/Support"
			module * { export * }

			// Exclude this; it's only included on Solaris.
			exclude header "llvm/Support/Solaris.h"

			// Exclude this; it's only included on AIX and fundamentally non-modular.
			exclude header "llvm/Support/AIXDataTypesFix.h"

			// Exclude this; it's fundamentally non-modular.
			exclude header "llvm/Support/PluginLoader.h"

			// Exclude this; it's a weirdly-factored part of llvm-gcov and conflicts
			// with the Analysis module (which also defines an llvm::GCOVOptions).
			exclude header "llvm/Support/GCOV.h"

			// FIXME: Mislayered?
			exclude header "llvm/Support/TargetRegistry.h"

			// These are intended for textual inclusion.
			textual header "llvm/Support/Dwarf.def"
			textual header "llvm/Support/ELFRelocs/AArch64.def"
			textual header "llvm/Support/ELFRelocs/ARM.def"
			textual header "llvm/Support/ELFRelocs/Hexagon.def"
			textual header "llvm/Support/ELFRelocs/i386.def"
			textual header "llvm/Support/ELFRelocs/Mips.def"
			textual header "llvm/Support/ELFRelocs/PowerPC64.def"
			textual header "llvm/Support/ELFRelocs/PowerPC.def"
			textual header "llvm/Support/ELFRelocs/Sparc.def"
			textual header "llvm/Support/ELFRelocs/SystemZ.def"
			textual header "llvm/Support/ELFRelocs/x86_64.def"

		}

	}

	module CodeGen_MachineValueType {
		requires cplusplus
		header "llvm/CodeGen/MachineValueType.h"
		export *
	}

	module Support_DataTypes {
		header "llvm/Support/DataTypes.h"
		export *
	}

	module C {
		umbrella "llvm-c"
		module * { export * }
	}

	link "LLVMAnalysis"
	link "LLVMAsmParser"
	link "LLVMX86Disassembler"
	link "LLVMAArch64AsmParser"
	link "LLVMAArch64AsmPrinter"
	link "LLVMAArch64CodeGen"
	link "LLVMAArch64Desc"
	link "LLVMAArch64Disassembler"
	link "LLVMAArch64Info"
	link "LLVMAArch64Utils"
	link "LLVMARMAsmParser"
	link "LLVMARMAsmPrinter"
	link "LLVMARMCodeGen"
	link "LLVMARMDesc"
	link "LLVMARMDisassembler"
	link "LLVMARMInfo"
	link "LLVMAsmPrinter"
	link "LLVMCodeGen"
	link "LLVMCppBackendCodeGen"
	link "LLVMCppBackendInfo"
	link "LLVMHexagonCodeGen"
	link "LLVMHexagonDesc"
	link "LLVMHexagonDisassembler"
	link "LLVMHexagonInfo"
	link "LLVMMipsAsmParser"
	link "LLVMMipsAsmPrinter"
	link "LLVMMipsCodeGen"
	link "LLVMMipsDesc"
	link "LLVMMipsDisassembler"
	link "LLVMMipsInfo"
	link "LLVMMSP430AsmPrinter"
	link "LLVMMSP430CodeGen"
	link "LLVMMSP430Desc"
	link "LLVMMSP430Info"
	link "LLVMNVPTXAsmPrinter"
	link "LLVMNVPTXCodeGen"
	link "LLVMNVPTXDesc"
	link "LLVMNVPTXInfo"
	link "LLVMPowerPCAsmParser"
	link "LLVMPowerPCAsmPrinter"
	link "LLVMPowerPCCodeGen"
	link "LLVMPowerPCDesc"
	link "LLVMPowerPCDisassembler"
	link "LLVMPowerPCInfo"
	link "LLVMR600AsmParser"
	link "LLVMR600AsmPrinter"
	link "LLVMR600CodeGen"
	link "LLVMR600Desc"
	link "LLVMR600Info"
	link "LLVMSparcAsmParser"
	link "LLVMSparcAsmPrinter"
	link "LLVMSparcCodeGen"
	link "LLVMSparcDesc"
	link "LLVMSparcDisassembler"
	link "LLVMSparcInfo"
	link "LLVMSystemZAsmParser"
	link "LLVMSystemZAsmPrinter"
	link "LLVMSystemZCodeGen"
	link "LLVMSystemZDesc"
	link "LLVMSystemZDisassembler"
	link "LLVMSystemZInfo"
	link "LLVMX86AsmParser"
	link "LLVMX86AsmPrinter"
	link "LLVMX86CodeGen"
	link "LLVMX86Desc"
	link "LLVMX86Info"
	link "LLVMX86Utils"
	link "LLVMXCoreAsmPrinter"
	link "LLVMXCoreCodeGen"
	link "LLVMXCoreDesc"
	link "LLVMXCoreDisassembler"
	link "LLVMXCoreInfo"
	link "LLVMDebugInfoDWARF"
	link "LLVMDebugInfoPDB"
	link "LLVMExecutionEngine"
	link "LLVMPasses"
	link "LLVMMCDisassembler"
	link "LLVMMCJIT"
	link "LLVMMCParser"
	link "LLVMMC"
	link "LLVMObject"
	link "LLVMTransformUtils"
	link "LLVMSupport"
	link "LLVMObjCARCOpts"
	link "LLVMLinker"
	link "LLVMBitWriter"
	link "LLVMOrcJIT"
	link "LLVMInstrumentation"
	link "LLVMSelectionDAG"
	link "LLVMipo"
	link "LLVMVectorize"
	link "LLVMInterpreter"
	link "LLVMRuntimeDyld"
	link "LLVMTarget"
	link "LLVMScalarOpts"
	link "LLVMProfileData"
	link "LLVMBitReader"
	link "LLVMInstCombine"
	link "LLVMipa"
	link "LLVMCore"

  link "termcap"
}